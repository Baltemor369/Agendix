import streamlit as st
import sqlite3, os
from dotenv import load_dotenv
# from datetime import datetime, timedelta

# --- Imports internes ---
from func.geocode import geocode_appointments
from func.clustering import clustering
from func.tsr_plan import plan_clusters
# from func.map_gen import plot_clusters_map_v2  # tu peux commenter si inutile

# --- Config ---
load_dotenv(dotenv_path=".secret")
DB_PATH = os.getenv("DB_PATH")
ORS_API_KEY = os.getenv("ORS_API_KEY")

st.title("üìÖ Agendix Routing - Optimisation des tourn√©es")

# --- Connexion DB ---
conn = sqlite3.connect(DB_PATH)
c = conn.cursor()

# --------------------------------------------------
# 1. S√©lection du voyageur (d√©p√¥t)
# --------------------------------------------------
st.subheader("üë§ Choix du Voyageur")
c.execute("SELECT id, nom, ville FROM depots")
depots = c.fetchall()

if not depots:
    st.warning("‚ö†Ô∏è Aucun d√©p√¥t trouv√© dans la base. Veuillez en cr√©er un dans la page D√©p√¥ts.")
    st.stop()

traveler_choice = st.selectbox(
    "S√©lectionnez le voyageur :",
    options=[f"{nom} ({ville})" for _, nom, ville in depots]
)
depot_id = depots[[f"{nom} ({ville})" for _, nom, ville in depots].index(traveler_choice)][0]

# --------------------------------------------------
# 2. Bouton pour lancer l‚Äôoptimisation
# --------------------------------------------------
st.subheader("‚öôÔ∏è Optimisation")
if st.button("üöÄ Lancer l'optimisation des RDV"):
    try:
        st.info("üìç G√©ocodage des adresses...")
        geocode_appointments(DB_PATH, ORS_API_KEY)

        st.info("üîó Regroupement par proximit√©...")
        clustering(DB_PATH, capacity=6, max_distance_km=30, verbose=True)

        # st.info("üõ£Ô∏è Ordonner les itin√©raires...")
        # plan_clusters(DB_PATH, ORS_API_KEY)

        st.success("‚úÖ Optimisation termin√©e !")
        # st.session_state["optim_done"] = True
        # st.rerun()

    except Exception as e:
        st.error(f"‚ùå Une erreur est survenue : {e}")

# --------------------------------------------------
# 3. Visualiser les clusters & itin√©raires
# --------------------------------------------------
if "optim_done" in st.session_state:
    st.subheader("üìä R√©sultats des clusters")

    # Charger clusters disponibles
    c.execute("""
        SELECT DISTINCT i.cluster_id, c.cluster_name
        FROM itineraries i
        JOIN clusters c ON i.cluster_id = c.id
    """)
    clusters = c.fetchall()

    if clusters:
        cluster_choice = st.selectbox(
            "Choisir un cluster √† afficher :",
            options=[name for _, name in clusters]
        )
        cluster_id = next(cid for cid, name in clusters if name == cluster_choice)

        # R√©cup√©rer itin√©raire (s√©quence ordonn√©e)
        c.execute("""
            SELECT appt_id, sequence, arrive_time, depart_time, travel_time_prev, distance_prev
            FROM itineraries
            WHERE cluster_id = ?
            ORDER BY sequence
        """, (cluster_id,))
        itin = c.fetchall()

        st.subheader("üïí Planning du cluster")

        # R√©cup√©ration de l'itin√©raire complet
        c.execute("""
            SELECT appt_id, sequence, depart_time, arrive_time, duration, travel_time_prev, distance_prev
            FROM itineraries
            WHERE cluster_id = ?
            ORDER BY sequence
        """, (cluster_id,))
        itin = c.fetchall()

        # On parcourt les trajets entre chaque point
        for i in range(1, len(itin)):
            prev_appt_id, _, _, prev_depart, _, _ = itin[i-1]
            appt_id, seq, arrive, depart, ttime, dist = itin[i]

            # Label des points (RDV ou D√©p√¥t)
            prev_label = f"RDV {prev_appt_id}" if prev_appt_id else traveler_choice
            curr_label = f"RDV {appt_id}" if appt_id else traveler_choice

            st.markdown(
                f"**{seq}.** {prev_label} ‚Üí {curr_label}  "
                f"| D√©part : {prev_depart} | Arriv√©e : {arrive}  "
                f"| üöó {ttime} min / {dist:.1f} km"
            )

    else:
        st.info("‚ÑπÔ∏è Aucun cluster n‚Äôa encore √©t√© g√©n√©r√©.")

conn.close()
